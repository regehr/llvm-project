; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -passes=instcombine -S | FileCheck %s

;; LLVM has no optimizations for the following: https://godbolt.org/z/rGnGE79Wv
;; <- Positive Tests ->

;; LHS: For positive numbers
;; ALive2 verified: https://alive2.llvm.org/ce/z/66iv-o
define i32 @test1(i32 %A, i32 %B) {
  %C = sub i32 %A, %B     
  %D = mul i32 %B, 10        
  %E = add i32 %C, %D       
  ret i32 %E                 
; CHECK-LABEL: @test1(
; CHECK-NEXT:    [[F:%.*]] = mul i32 [[B:%.*]], 9
; CHECK-NEXT:    [[G:%.*]] = add i32 [[B:%.*]], [[F:%.*]]
; CHECK-NEXT:    ret i32 [[G:%.*]]
;
}

;; LHS: For Negative numbers
;; Alive2 verified: https://alive2.llvm.org/ce/z/Q2cups
define i32 @test2(i32 %A, i32 %B) {
  %C = sub i32 %A, %B     
  %D = mul i32 %B, -10        
  %E = add i32 %C, %D       
  ret i32 %E                 
; CHECK-LABEL: @test2(
; CHECK-NEXT:    [[F:%.*]] = mul i32 [[B:%.*]], -11
; CHECK-NEXT:    [[G:%.*]] = add i32 [[B:%.*]], [[F:%.*]]
; CHECK-NEXT:    ret i32 [[G:%.*]]
;
}

;; RHS: For positive numbers
;; Alive2 verified: https://alive2.llvm.org/ce/z/xTD-6v
define i32 @test3(i32 %A, i32 %B) {
  %C = mul i32 %B, 10 ; b * 10
  %D = sub i32 %A, %B ; a - b
  %E = add i32 %D, %C ; a + 9 * b
  ret i32 %E
; CHECK-LABEL: @test3(
; CHECK-NEXT:    [[F:%.*]] = mul i32 [[B:%.*]], 9
; CHECK-NEXT:    [[G:%.*]] = add i32 [[B:%.*]], [[F:%.*]]
; CHECK-NEXT:    ret i32 [[G:%.*]]
;
}

;; RHS: For negative numbers
;; Alive2 verified: https://alive2.llvm.org/ce/z/c6e77U
define i32 @test4(i32 %A, i32 %B) {
  %C = mul i32 %B, -10 ; b * 10
  %D = sub i32 %A, %B ; a - b
  %E = add i32 %D, %C ; a + 9 * b
  ret i32 %E
; CHECK-LABEL: @test4(
; CHECK-NEXT:    [[F:%.*]] = mul i32 [[B:%.*]], -11
; CHECK-NEXT:    [[G:%.*]] = add i32 [[B:%.*]], [[F:%.*]]
; CHECK-NEXT:    ret i32 [[G:%.*]]
;
}
    
;; <- Negative Tests ->

;; When mul B, C where C can be shl no optimization happens
;; Alive2 verified: https://alive2.llvm.org/ce/z/w23md4
define i32 @test5(i32 %A, i32 %B) {
  %C = sub i32 %A, %B     
  %D = mul i32 %B, 8      
  %E = add i32 %C, %D       
  ret i32 %E                 
; CHECK-LABEL: @test5(
; CHECK-NOT:    [[F:%.*]] = mul i32 [[B:%.*]], 7
}