; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -passes='instcombine<no-verify-fixpoint>' -S | FileCheck %s

; check commutivity on and, icmp instructions
define i1 @sext-remove-i8-1(i8 %x) {
; CHECK-LABEL: @sext-remove-i8-1(
; CHECK-NEXT:    [[A:%.*]] = and i8 [[X:%.*]], -127
; CHECK-NEXT:    [[C:%.*]] = icmp eq i8 [[A:%.*]], 1
; CHECK-NEXT:    ret i1 [[C]]
;
  %1 = sext i8 %x to i32
  %2 = and i32 %1, -2147483647
  %3 = icmp eq i32 %2, 1
  ret i1 %3
}

define i1 @sext-remove-i8-2(i8 %x) {
; CHECK-LABEL: @sext-remove-i8-2(
; CHECK-NEXT:    [[A:%.*]] = and i8 [[X:%.*]], -127
; CHECK-NEXT:    [[C:%.*]] = icmp eq i8 [[A:%.*]], 1
; CHECK-NEXT:    ret i1 [[C]]
;
  %1 = sext i8 %x to i32
  %2 = and i32 %1, -2147483647
  %3 = icmp eq i32 1, %2
  ret i1 %3
}

define i1 @sext-remove-i8-3(i8 %x) {
; CHECK-LABEL: @sext-remove-i8-3(
; CHECK-NEXT:    [[A:%.*]] = and i8 [[X:%.*]], -127
; CHECK-NEXT:    [[C:%.*]] = icmp eq i8 [[A:%.*]], 1
; CHECK-NEXT:    ret i1 [[C]]
;
  %1 = sext i8 %x to i32
  %2 = and i32 -2147483647, %1
  %3 = icmp eq i32 1, %2
  ret i1 %3
}

define i1 @sext-remove-i8-4(i8 %x) {
; CHECK-LABEL: @sext-remove-i8-4(
; CHECK-NEXT:    [[A:%.*]] = and i8 [[X:%.*]], -127
; CHECK-NEXT:    [[C:%.*]] = icmp eq i8 [[A:%.*]], 1
; CHECK-NEXT:    ret i1 [[C]]
;
  %1 = sext i8 %x to i32
  %2 = and i32 -2147483647, %1
  %3 = icmp eq i32 %2, 1
  ret i1 %3
}

define i1 @sext-remove-i3(i3 %x) {
; CHECK-LABEL: @sext-remove-i3(
; CHECK-NEXT:    [[A:%.*]] = and i3 [[X:%.*]], -3
; CHECK-NEXT:    [[C:%.*]] = icmp eq i3 [[A:%.*]], 1
; CHECK-NEXT:    ret i1 [[C]]
;
  %1 = sext i3 %x to i32
  %2 = and i32 %1, -2147483647
  %3 = icmp eq i32 %2, 1
  ret i1 %3
}

define i1 @sext-remove-i4(i4 %x) {
; CHECK-LABEL: @sext-remove-i4(
; CHECK-NEXT:    [[A:%.*]] = and i4 [[X:%.*]], -7
; CHECK-NEXT:    [[C:%.*]] = icmp eq i4 [[A:%.*]], 1
; CHECK-NEXT:    ret i1 [[C]]
;
  %1 = sext i4 %x to i32
  %2 = and i32 %1, -2147483647
  %3 = icmp eq i32 %2, 1
  ret i1 %3
}

define i1 @sext-remove-i16(i16 %x) {
; CHECK-LABEL: @sext-remove-i16(
; CHECK-NEXT:    [[A:%.*]] = and i16 [[X:%.*]], -32767
; CHECK-NEXT:    [[C:%.*]] = icmp eq i16 [[A:%.*]], 1
; CHECK-NEXT:    ret i1 [[C]]
;
  %1 = sext i16 %x to i32
  %2 = and i32 %1, -2147483647
  %3 = icmp eq i32 %2, 1
  ret i1 %3
}

define i1 @sext-remove-i2-fail(i2 %x) {
; CHECK-LABEL: @sext-remove-i2-fail(
; CHECK-NEXT:    [[A:%.*]] = sext i2 [[X:%.*]] to i32
; CHECK-NEXT:    [[B:%.*]] = and i32 [[A:%.*]], -2147483647
; CHECK-NEXT:    [[C:%.*]] = icmp eq i32 [[B:%.*]], 1
; CHECK-NEXT:    ret i1 [[C]]
;
  %1 = sext i2 %x to i32
  %2 = and i32 %1, -2147483647
  %3 = icmp eq i32 %2, 1
  ret i1 %3
}

define i1 @sext64-remove-i16(i16 %x) {
; CHECK-LABEL: @sext64-remove-i16(
; CHECK-NEXT:    [[A:%.*]] = and i16 [[X:%.*]], -32767
; CHECK-NEXT:    [[C:%.*]] = icmp eq i16 [[A:%.*]], 1
; CHECK-NEXT:    ret i1 [[C]]
;
  %1 = sext i16 %x to i64
  %2 = and i64 %1, -9223372036854775807
  %3 = icmp eq i64 %2, 1
  ret i1 %3
}

define i1 @sext64-remove-i8(i8 %x) {
; CHECK-LABEL: @sext64-remove-i8(
; CHECK-NEXT:    [[A:%.*]] = and i8 [[X:%.*]], -127
; CHECK-NEXT:    [[C:%.*]] = icmp eq i8 [[A:%.*]], 1
; CHECK-NEXT:    ret i1 [[C]]
;
  %1 = sext i8 %x to i64
  %2 = and i64 %1, -9223372036854775807
  %3 = icmp eq i64 %2, 1
  ret i1 %3
}

define i1 @sext64-remove-i2-fail(i2 %x) {
; CHECK-LABEL: @sext64-remove-i2-fail(
; CHECK-NEXT:    [[A:%.*]] = sext i2 [[X:%.*]] to i64
; CHECK-NEXT:    [[B:%.*]] = and i64 [[A:%.*]], -9223372036854775807
; CHECK-NEXT:    [[C:%.*]] = icmp eq i64 [[B:%.*]], 1
; CHECK-NEXT:    ret i1 [[C]]
;
  %1 = sext i2 %x to i64
  %2 = and i64 %1, -9223372036854775807
  %3 = icmp eq i64 %2, 1
  ret i1 %3
}

; sign extension remove with 3 inputs
define i1 @sext3-remove-i8(i8 %x, i8 %y, i32 %z) {
; CHECK-LABEL: @sext3-remove-i8(
; CHECK:    [[A:%.*]] = and i8 [[X:%.*]], [[Y:%.*]]
; CHECK:    [[B:%.*]] = trunc i32 [[Z:%.*]] to i8
; CHECK:    [[C:%.*]] = icmp eq i8 [[B:%.*]], [[A:%.*]]
; CHECK:    ret i1 [[C]]
;
  %as = icmp ult i32 %z, 127
  call void @llvm.assume(i1 %as)
  %1 = and i8 %y, %x
  %2 = sext i8 %1 to i32
  %cmp = icmp eq i32 %z, %2
  ret i1 %cmp
}

define i1 @sext3-remove-i8-fail(i8 %x, i8 %y, i32 %z) {
; CHECK-LABEL: @sext3-remove-i8-fail(
; CHECK:    [[A:%.*]] = icmp ult i32 [[Z:%.*]], 129
; CHECK:    [[B:%.*]] = and i8 [[Y:%.*]], [[X:%.*]]
; CHECK:    [[C:%.*]] = sext i8 [[B:%.*]] to i32
; CHECK:    [[D:%.*]] = icmp eq i32 [[Z:%.*]], [[C:%.*]]
; CHECK:    ret i1 [[D]]
;
  %as = icmp ult i32 %z, 129
  call void @llvm.assume(i1 %as)
  %1 = and i8 %y, %x
  %2 = sext i8 %1 to i32
  %cmp = icmp eq i32 %z, %2
  ret i1 %cmp
}

define i1 @sext3-remove-i16(i16 %x, i16 %y, i32 %z) {
; CHECK-LABEL: @sext3-remove-i16(
; CHECK:    [[A:%.*]] = and i16 [[X:%.*]], [[Y:%.*]]
; CHECK:    [[B:%.*]] = trunc i32 [[Z:%.*]] to i16
; CHECK:    [[C:%.*]] = icmp eq i16 [[B:%.*]], [[A:%.*]]
; CHECK:    ret i1 [[C]]
;
  %as = icmp ult i32 %z, 32767
  call void @llvm.assume(i1 %as)
  %1 = and i16 %y, %x
  %2 = sext i16 %1 to i32
  %cmp = icmp eq i32 %z, %2
  ret i1 %cmp
}
